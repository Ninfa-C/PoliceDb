// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PoliceDb.Data;

#nullable disable

namespace PoliceDb.Migrations
{
    [DbContext(typeof(PoliceDbContext))]
    partial class PoliceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PoliceDb.Models.Anagrafica", b =>
                {
                    b.Property<Guid>("IdAnagrafica")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CAP")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("CF")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Città")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Cognome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Indirizzo")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdAnagrafica");

                    b.HasIndex("CF")
                        .IsUnique();

                    b.ToTable("Anagrafiche");

                    b.HasData(
                        new
                        {
                            IdAnagrafica = new Guid("c1fcded1-0f9d-45c6-8c78-64f84600fa1a"),
                            CAP = "20121",
                            CF = "RSSMRA80A01H501Z",
                            Città = "Milano",
                            Cognome = "Rossi",
                            Indirizzo = "Via Roma 10",
                            Nome = "Mario"
                        },
                        new
                        {
                            IdAnagrafica = new Guid("e8d5c12f-b41f-4748-9d3d-d6f2387582c4"),
                            CAP = "10121",
                            CF = "BNCPLC85B01F205X",
                            Città = "Torino",
                            Cognome = "Bianchi",
                            Indirizzo = "Corso Venezia 5",
                            Nome = "Luca"
                        },
                        new
                        {
                            IdAnagrafica = new Guid("b95d59ac-702d-4b32-bc59-e0f25f5f576b"),
                            CAP = "50122",
                            CF = "VRDGLI90C41D612K",
                            Città = "Firenze",
                            Cognome = "Verdi",
                            Indirizzo = "Piazza Duomo 3",
                            Nome = "Giulia"
                        },
                        new
                        {
                            IdAnagrafica = new Guid("b7bcfd07-7f8b-47e7-b636-8c6b351a0d0f"),
                            CAP = "40123",
                            CF = "NRAANN75D61G312T",
                            Città = "Bologna",
                            Cognome = "Neri",
                            Indirizzo = "Via Garibaldi 8",
                            Nome = "Anna"
                        },
                        new
                        {
                            IdAnagrafica = new Guid("a3208b53-dba6-4857-95b4-264cc4209d3b"),
                            CAP = "80121",
                            CF = "GLLFRN95E01C123U",
                            Città = "Napoli",
                            Cognome = "Gialli",
                            Indirizzo = "Viale Libertà 15",
                            Nome = "Francesco"
                        });
                });

            modelBuilder.Entity("PoliceDb.Models.TipoViolazione", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Descrizione")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("TipiViolazione");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d2a2c31f-ea47-4c69-a4c8-d9f3f8c2a2f3"),
                            Descrizione = "Eccesso di velocità"
                        },
                        new
                        {
                            Id = new Guid("bd3d24c4-c47a-4772-8bf4-13fecac97cb4"),
                            Descrizione = "Guida in stato di ebbrezza"
                        },
                        new
                        {
                            Id = new Guid("b51a10bc-e722-45a5-9357-b81b75f2d387"),
                            Descrizione = "Guida senza cintura di sicurezza"
                        },
                        new
                        {
                            Id = new Guid("f6a06f68-ea4c-4ad7-9b10-8ef0ed2c93d7"),
                            Descrizione = "Utilizzo del cellulare alla guida"
                        },
                        new
                        {
                            Id = new Guid("c6d1d5b0-7bfa-4c2b-bd92-7bbed7e6f001"),
                            Descrizione = "Passaggio con il semaforo rosso"
                        });
                });

            modelBuilder.Entity("PoliceDb.Models.Verbali", b =>
                {
                    b.Property<Guid>("IdVerbale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataTrascrizioneVerbale")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataViolazione")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IdAnagrafica")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IndirizzoViolazione")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("NominativoAgente")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ScadenzaContestazione")
                        .HasColumnType("datetime2");

                    b.Property<int>("TotaleDecurtamentoPunti")
                        .HasColumnType("int");

                    b.Property<decimal>("TotaleImporto")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdVerbale");

                    b.HasIndex("IdAnagrafica");

                    b.ToTable("Verbali");
                });

            modelBuilder.Entity("PoliceDb.Models.ViolazioniVerbali", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DecurtamentoPunti")
                        .HasColumnType("int");

                    b.Property<Guid>("IdVerbale")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IdViolazione")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Importo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("IdViolazione");

                    b.HasIndex("IdVerbale", "IdViolazione")
                        .IsUnique();

                    b.ToTable("ViolazioniVerbali");
                });

            modelBuilder.Entity("PoliceDb.Models.Verbali", b =>
                {
                    b.HasOne("PoliceDb.Models.Anagrafica", "Anagrafica")
                        .WithMany("Verbali")
                        .HasForeignKey("IdAnagrafica")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anagrafica");
                });

            modelBuilder.Entity("PoliceDb.Models.ViolazioniVerbali", b =>
                {
                    b.HasOne("PoliceDb.Models.Verbali", "Verbale")
                        .WithMany("ViolazioniVerbali")
                        .HasForeignKey("IdVerbale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PoliceDb.Models.TipoViolazione", "TipoViolazione")
                        .WithMany()
                        .HasForeignKey("IdViolazione")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TipoViolazione");

                    b.Navigation("Verbale");
                });

            modelBuilder.Entity("PoliceDb.Models.Anagrafica", b =>
                {
                    b.Navigation("Verbali");
                });

            modelBuilder.Entity("PoliceDb.Models.Verbali", b =>
                {
                    b.Navigation("ViolazioniVerbali");
                });
#pragma warning restore 612, 618
        }
    }
}
